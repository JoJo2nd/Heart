/********************************************************************
	created:	2008/10/11
	created:	11:10:2008   13:37
	filename: 	hiEffect.h
	author:		James Moran
	
	purpose:	
*********************************************************************/

namespace Heart
{
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hdMaterialParam hdD3D9Material::gInvalidParameter_;


	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	hdD3D9Material::~hdD3D9Material()
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	void hdD3D9Material::ApplyEffect()
	{
// 		hcAssert( pEffect_ );
// 
// 		UINT passes;
// 
// 		pEffect_->SetTechnique( techHandle_ );
// 		pEffect_->Begin( &passes, 0 );
// 		hcAssert( passes == 1 );//only support single pass atm
// 		pEffect_->BeginPass( 0 );
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	void hdD3D9Material::EndEffect()
	{
// 		pEffect_->EndPass();
// 		pEffect_->End();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	void hdD3D9Material::SetFloatArrayParameter( const hdMaterialParam* param, const hFloat* val, hUint32 count )
	{
		//hcAssert( hRenderer::IsRenderThread() );
		//pEffect_->SetFloatArray( param->handle_, val, count );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hdD3D9Material::SetFloatArrayParameter( hUint32 index, const hFloat* val, hUint32 count )
	{
		//hcAssert( hRenderer::IsRenderThread() );
		SetFloatArrayParameter( &pParameters_[index], val, count );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hdD3D9Material::SetTextureParameter( const hdMaterialParam* param, const hdD3D9Texture* pITexture )
	{
		//hcAssert( hRenderer::IsRenderThread() );
		//pEffect_->SetTexture( param->handle_, pITexture->pD3DTexture_ );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hdD3D9Material::SetTextureParameter( hUint32 index, const hdD3D9Texture* pITexture )
	{
		//hcAssert( hRenderer::IsRenderThread() );
		//pEffect_->SetTexture( pParameters_[index].handle_, pITexture->pD3DTexture_ );
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	void hdD3D9Material::CommitChanges()
	{
		//pEffect_->CommitChanges();
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hdD3D9Material::InitialiseEffectParameters( hUint32 paramCount )
	{

	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	const hdMaterialParam* hdD3D9Material::GetInvalidParamGUID() const
	{
		return &gInvalidParameter_;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	const hdMaterialParam* hdD3D9Material::GetParameterGUID( const char* paramName ) const
	{
		for ( hUint32 i = 0; i < nParameters_; ++i )
		{
			if ( strcmp( pParameters_[ i ].desc_.Name, paramName ) == 0 )
			{
				return &pParameters_[ i ];
			}
		}

		return GetInvalidParamGUID();
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	const hdMaterialParam* hdD3D9Material::GetParameterGUID( hUint32 index ) const
	{
		return &pParameters_[index];
	}

}
