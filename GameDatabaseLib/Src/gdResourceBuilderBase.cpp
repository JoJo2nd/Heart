/********************************************************************

	filename: 	gdResourceBuilderBase.cpp	
	
	Copyright (c) 8:11:2011 James Moran
	
	This software is provided 'as-is', without any express or implied
	warranty. In no event will the authors be held liable for any damages
	arising from the use of this software.
	
	Permission is granted to anyone to use this software for any purpose,
	including commercial applications, and to alter it and redistribute it
	freely, subject to the following restrictions:
	
	1. The origin of this software must not be misrepresented; you must not
	claim that you wrote the original software. If you use this software
	in a product, an acknowledgment in the product documentation would be
	appreciated but is not required.
	
	2. Altered source versions must be plainly marked as such, and must not be
	misrepresented as being the original software.
	
	3. This notice may not be removed or altered from any source
	distribution.

*********************************************************************/

gdDECLARE_SAVE_VERSION( GameData::gdTimestampInfo );

namespace GameData
{

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdTimestampInfo::gdTimestampInfo()
        : parameterCRC_( 0 )
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdTimestampInfo::gdTimestampInfo( const gdTimestampInfo& rhs )
    {
        dllTimestamp_   = rhs.dllTimestamp_;
        parameterCRC_   = rhs.parameterCRC_;
        fileTimestamps_ = rhs.fileTimestamps_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdTimestampInfo::~gdTimestampInfo()
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdTimestampInfo::AddFileTimestamp( const gdFileTimestamp& timestamp )
    {
        fileTimestamps_.push_back( timestamp );
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdTimestampInfo::SetDllTimestamp( gdTime_t timestamp )
    {
        dllTimestamp_ = timestamp;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdTimestampInfo::SetParamCRC( gdUint32 crc )
    {
        parameterCRC_ = crc;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdTimestampInfo::operator==( const gdTimestampInfo& rhs ) const
    {
        if ( fileTimestamps_.size() != rhs.fileTimestamps_.size() )
            return false;

        gdBool match = true;
        match &= parameterCRC_ == rhs.parameterCRC_;
        match &= dllTimestamp_ == rhs.dllTimestamp_;
        for( gdUint32 i = 0; i < fileTimestamps_.size(); ++i )
        {
            match &= fileTimestamps_[i] == rhs.fileTimestamps_[i];
        }

        return match;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdTimestampInfo::operator!=( const gdTimestampInfo& rhs ) const
    {
        return !(*this == rhs);
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdTimestampInfo& gdTimestampInfo::operator = ( const gdTimestampInfo& rhs )
    {
        dllTimestamp_   = rhs.dllTimestamp_;
        parameterCRC_   = rhs.parameterCRC_;
        fileTimestamps_ = rhs.fileTimestamps_;   

        return *this;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdTimestampInfo::FileTimestampsValid() const
    {
        gdUint32 nfiles = fileTimestamps_.size();
        for ( gdUint32 i = 0; i < nfiles; ++i )
        {
            if ( !fileTimestamps_[i].IsValid() )
            {
                return false;
            }
        }

        return true;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdTime_t gdTimestampInfo::GetDllTimestamp() const
    {
        return dllTimestamp_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdUint32 gdTimestampInfo::GetParamCRC() const
    {
        return parameterCRC_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdResourceBuilderBase::gdResourceBuilderBase( const gdResourceBuilderConstructionInfo& builderInfo )
        : plugInInfo_( builderInfo.plugInInfo_ )
        , parameters_( builderInfo.parameters_ )
        , plugInInfoMap_( builderInfo.resourcePlugInMap_ )
        , uri_( builderInfo.uri_ )
        , inputFile_( builderInfo.inputFile_ )
        , outputFile_( builderInfo.outputFile_ )
    {
        timestampInfo_.SetDllTimestamp( plugInInfo_.GetLastModificationTime() );
        timestampInfo_.AddFileTimestamp( inputFile_->GetFileTimestamp() );
        timestampInfo_.SetParamCRC( builderInfo.resParamCRC_ );
        warningMsgs_ = "";
        errorMsg_ = "";
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdResourceBuilderBase::~gdResourceBuilderBase()
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdFileHandle* gdResourceBuilderBase::OpenFile( const gdChar* path )
    {
        gdFileHandle* handle = new gdFileHandle();
        handle->Open( path );
        timestampInfo_.AddFileTimestamp( handle->GetFileTimestamp() );

        return handle;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdResourceBuilderBase::CloseFile( gdFileHandle* handle )
    {
        handle->Close();
        delete handle;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdFileHandle* gdResourceBuilderBase::GetInputFile()
    {
        return inputFile_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdFileHandle* gdResourceBuilderBase::GetOutputFile()
    {
        return outputFile_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    Heart::hSerialiser* gdResourceBuilderBase::GetSerilaiseObject()
    {
        return &serialiserObject_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdTimestampInfo& gdResourceBuilderBase::GetTimestampInfo() const
    {
        return timestampInfo_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdUniqueResourceID& gdResourceBuilderBase::GetResourceURI() const
    {
        return uri_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdParameterValue& gdResourceBuilderBase::GetParameter( const gdChar* param ) const
    {
        for ( gdUint32 i = 0; i < parameters_.size(); ++i )
        {
            if ( strcmp( parameters_[i].GetName(), param ) == 0 )
            {
                return *parameters_[i].GetValue();
            }
        }

        //Never Returns
        ThrowFatalError( "Couldn't find data for parameter %s with resource %s/%s", param, uri_.GetResourcePath(), uri_.GetResourceName() );

        return *parameters_[0].GetValue();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdResourceBuilderBase::ThrowFatalError( const gdChar* msg, ... ) const
    {
        gdChar totalMsg[4096];
        va_list ap;
        va_start( ap, msg );
        vsprintf_s( totalMsg, 4096, msg, ap );
        va_end( ap );

        errorMsg_ += totalMsg;

        throw std::exception( totalMsg );
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdChar* gdResourceBuilderBase::GetErrorMessage() const
    {
        return errorMsg_.c_str();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdResourceBuilderBase::AppendWarning( const gdChar* msg, ... ) const
    {
        gdChar totalMsg[4096];
        va_list ap;
        va_start( ap, msg );
        vsprintf_s( totalMsg, 4096, msg, ap );
        va_end( ap );

        warningMsgs_ += totalMsg;
        warningMsgs_ += "\n";
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdChar* gdResourceBuilderBase::GetWarningMessages() const
    {
        return warningMsgs_.c_str();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdByte* gdResourceBuilderBase::GetMD5Digest() const
    {
        return outputFile_->GetWrittenDataMD5Digest();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    hUint32 gdResourceBuilderBase::AddBuildDependency( const hChar* resType, const hChar* depName, const hChar* inputPath )
    {
        hUint32 retCRC;
        gdResourceInfo* depInfo = new gdResourceInfo();
        gdUniqueResourceID depURI;
        hUint32 len = strlen( uri_.GetResourcePath() );
        len += strlen( uri_.GetResourceName() ) + strlen( "_DEP/" ) + 1;
        hChar* path = (hChar*)alloca( len );
        strncpy_s( path, len, uri_.GetResourcePath(), len-1 );
        strcat_s( path, len, uri_.GetResourceName() );
        strcat_s( path, len, "_DEP/" );
        depURI.SetResourcePath( path );
        depURI.SetResourceName( depName );

        depInfo->SetInputFilePath( inputPath );
        depInfo->SetResourceID( depURI );

        gdResorucePlugInMap::const_iterator resTypeInfo = plugInInfoMap_.find( resType );
        if ( resTypeInfo == plugInInfoMap_.end() )
            ThrowFatalError( "Can't find plug in information for resource type \"%s\". Attempt was made to add as a Dependency for resource %s%s", resType, uri_.GetResourcePath(), uri_.GetResourceName() );

        depInfo->ApplyResourceParametersFromResourceType( *resTypeInfo->second );

        retCRC = depInfo->GetResourceID()->GetResourceCRCID();
        dependencies_[retCRC] = depInfo;

        return retCRC;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterValue* gdResourceBuilderBase::GetDependencyParameter( hUint32 depID, const hChar* name )
    {
        gdDependencyArrayType::iterator dep = dependencies_.find( depID );
        if ( dep == dependencies_.end() )
            ThrowFatalError( "Can't find dependency 0x%08X", depID );

        gdParameterValue* ret = dep->second->GetParameter( name );

        if ( !ret )
            ThrowFatalError( "Can't find parameter \"%s\" for dependency 0x%08X", name, depID );

        return ret;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdDependencyArrayType* gdResourceBuilderBase::GetDependencyMap() const
    {
        return &dependencies_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdResourceBuilderBase::TouchFileIntoBuildCache( const hChar* path )
    {
        gdFileHandle handle;
        handle.Open( path );
        if ( handle.IsValid() )
        {
            handle.Open( path );
            timestampInfo_.AddFileTimestamp( handle.GetFileTimestamp() );
            handle.Close();
        }
    }

}