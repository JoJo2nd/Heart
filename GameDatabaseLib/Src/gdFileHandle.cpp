/********************************************************************

	filename: 	gdFileHandle.cpp	
	
	Copyright (c) 8:11:2011 James Moran
	
	This software is provided 'as-is', without any express or implied
	warranty. In no event will the authors be held liable for any damages
	arising from the use of this software.
	
	Permission is granted to anyone to use this software for any purpose,
	including commercial applications, and to alter it and redistribute it
	freely, subject to the following restrictions:
	
	1. The origin of this software must not be misrepresented; you must not
	claim that you wrote the original software. If you use this software
	in a product, an acknowledgment in the product documentation would be
	appreciated but is not required.
	
	2. Altered source versions must be plainly marked as such, and must not be
	misrepresented as being the original software.
	
	3. This notice may not be removed or altered from any source
	distribution.

*********************************************************************/

gdDECLARE_SAVE_VERSION( GameData::gdFileTimestamp );

namespace GameData
{

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdFileTimestamp::gdFileTimestamp()
        : lastModTime_(0)
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdFileTimestamp::~gdFileTimestamp()
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdTime_t gdFileTimestamp::GetTimestamp() const
    {
        return lastModTime_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdFileTimestamp::SetTimestamp( gdTime_t val )
    {
        lastModTime_ = val;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdFileTimestamp::SetPath( const gdChar* val )
    {
        path_ = val;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdFileTimestamp::operator==( const gdFileTimestamp& rhs ) const
    {
        return path_ == rhs.path_ && lastModTime_ == rhs.lastModTime_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdFileTimestamp::operator!=( const gdFileTimestamp& rhs ) const
    {
        return !(*this == rhs);
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdFileTimestamp::IsValid() const
    {
        return lastModTime_ == boost::filesystem::last_write_time( path_ );
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const hChar* gdFileTimestamp::GetPath() const
    {
        return path_.c_str();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdFileHandle::gdFileHandle()
        : file_( NULL )
        , md5Enabled_( true )
    {

    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdFileHandle::~gdFileHandle()
    {

    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdFileHandle::Open( const gdChar* filename, gdBool write /*= false*/ )
    {
        using namespace boost::interprocess;
        using namespace boost::filesystem;

        file_ = fopen( filename, write ? "wb" : "rb" );

        if (file_)
        {
            timestamp_.SetPath( filename );
            timestamp_.SetTimestamp( last_write_time( filename ) );
        }

        cyMD5Init( &writtenDataMD5_ );
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdFileHandle::Close()
    {
        if ( file_ )
        {
            fclose( file_ );
        }

        cyMD5Final( &writtenDataMD5_, md5Digest_ );
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdFileTimestamp& gdFileHandle::GetFileTimestamp() const
    {
        return timestamp_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdUint64 gdFileHandle::GetFileSize() const
    {
        hUint32 p = ftell( file_ );
        fseek( file_, 0, SEEK_END );
        hUint32 ret = ftell( file_ );
        fseek( file_, p, SEEK_SET );
        return ret;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdUint32 gdFileHandle::Read( void* pBuffer, gdUint32 size )
    {
        //memcpy( pBuffer, (gdByte*)GetFilePointer() + filePos_, size );
        gdUint32 ret = fread( pBuffer, size, 1, file_ );
        return ret;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdUint32 gdFileHandle::Write( const void* pBuffer, gdUint32 size )
    {
        if ( md5Enabled_ )
        {
            cyMD5Update( &writtenDataMD5_, pBuffer, size );
        }
        //memcpy( (gdByte*)GetFilePointer() + filePos_, pBuffer, size );
        fwrite( pBuffer, size, 1, file_ );
        return size;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdUint32 gdFileHandle::Seek( hUint64 offset )
    {
        return (gdUint32)fseek( file_, (long)offset, SEEK_SET );
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdUint64 gdFileHandle::Tell()
    {
        return (hUint64)ftell( file_ );
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdByte* gdFileHandle::GetWrittenDataMD5Digest() const
    {
        return md5Digest_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const hChar* gdFileHandle::GetPath() const
    {
        return timestamp_.GetPath();
    }

}