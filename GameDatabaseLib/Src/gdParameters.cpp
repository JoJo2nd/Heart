/********************************************************************

	filename: 	gdParameters.cpp	
	
	Copyright (c) 30:10:2011 James Moran
	
	This software is provided 'as-is', without any express or implied
	warranty. In no event will the authors be held liable for any damages
	arising from the use of this software.
	
	Permission is granted to anyone to use this software for any purpose,
	including commercial applications, and to alter it and redistribute it
	freely, subject to the following restrictions:
	
	1. The origin of this software must not be misrepresented; you must not
	claim that you wrote the original software. If you use this software
	in a product, an acknowledgment in the product documentation would be
	appreciated but is not required.
	
	2. Altered source versions must be plainly marked as such, and must not be
	misrepresented as being the original software.
	
	3. This notice may not be removed or altered from any source
	distribution.

*********************************************************************/

gdDECLARE_SAVE_VERSION( GameData::gdEnumValue )
gdDECLARE_SAVE_VERSION( GameData::gdParameterValue )
gdDECLARE_SAVE_VERSION( GameData::gdParameterPair )

namespace GameData
{    

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterValue::gdParameterValue()
        : type_( Type_Max )
        , valueNum_(0.f)
        , valueIntEnumBool_(0)
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterValue::gdParameterValue( Type type )
        : type_( type )
        , valueNum_(0.f)
        , valueIntEnumBool_(0)
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterValue::gdParameterValue( const gdEnumValueArray& enumValues ) 
        : type_( Type_Enum )
        , enumValues_( enumValues )
        , valueNum_(0.f)
        , valueIntEnumBool_(0)
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterValue::~gdParameterValue()
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdParameterValue::GetAsBool() const
    {
        gdAssert( IsBool() );
        return valueIntEnumBool_ != 0;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdInt gdParameterValue::GetAsInt() const
    {
        gdAssert( IsInt() );
        return valueIntEnumBool_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdFloat gdParameterValue::GetAsFloat() const
    {
        gdAssert( IsFloat() );
        return valueNum_;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdChar* gdParameterValue::GetAsString() const
    {
        gdAssert( IsString() );
        return valueStr_.c_str();
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdEnumValue& gdParameterValue::GetAsEnumValue() const
    {
        gdAssert( IsEnum() );
        return enumValues_[valueIntEnumBool_];
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdUint gdParameterValue::GetEnumValueCount() const
    {
        gdAssert( IsEnum() );
        return enumValues_.size();
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdEnumValue& gdParameterValue::GetEnumValue( gdUint idx ) const
    {
        gdAssert( IsEnum() );
        gdAssert( idx < GetEnumValueCount() );
        return enumValues_[idx];
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdChar* gdParameterValue::GetAsFilepath() const
    {
        return valueFilepath_.c_str();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterValue::Set( gdBool val )
    {
        gdAssert( IsBool() );
        valueIntEnumBool_ = val;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterValue::Set( gdInt val )
    {
        gdAssert( IsInt() );
        valueIntEnumBool_ = val;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterValue::Set( const gdChar* val )
    {
        gdAssert( IsString() );
        valueStr_ = val;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterValue::SetFile( const gdChar* val )
    {
        gdAssert( IsFilepath() );
        valueFilepath_ = val;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterValue::Set( gdFloat val )
    {
        gdAssert( IsFloat() );
        valueNum_ = val;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterValue::SetEnumByValue( gdUint val )
    {
        gdAssert( IsEnum() );
        for ( gdUint i = 0; i < GetEnumValueCount(); ++i )
        {
            if ( enumValues_[i].value_ == val )
            {
                valueIntEnumBool_ = (gdInt)i;
                return;
            }
        }

        gdAssert( false && "Value Not Found" );
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterValue::SetEnumByName( const gdChar* val )
    {
        gdAssert( IsEnum() );
        for ( gdUint i = 0; i < GetEnumValueCount(); ++i )
        {
            if ( enumValues_[i].name_ == val )
            {
                valueIntEnumBool_ = (gdInt)i;
                return;
            }
        }

        gdAssert( false && "Value Not Found" ); 
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdParameterValue::IsBool() const
    {
        return type_ == Type_Bool;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdParameterValue::IsInt() const
    {
        return type_ == Type_Int;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdParameterValue::IsFloat() const
    {
        return type_ == Type_Float;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdParameterValue::IsEnum() const
    {
        return type_ == Type_Enum;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdParameterValue::IsString() const
    {
        return type_ == Type_String;
    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdParameterValue::IsFilepath() const
    {
        return type_ == Type_Filename;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const hChar* gdParameterValue::ConvertToString() const
    {
        gdChar buf[1024];
        switch ( type_ )
        {
        case Type_Int:
            sprintf_s( buf, 1024, "%d", valueIntEnumBool_ );
            convertedValue_ = buf;
            break;
        case Type_Float:
            sprintf_s( buf, 1024, "%f", valueNum_ );
            convertedValue_ = buf;
            break;
        case Type_Enum:
            convertedValue_ = GetAsEnumValue().name_;
            break;
        case Type_Filename:
            convertedValue_ = valueFilepath_;
            break;
        case Type_String:
            convertedValue_ = valueStr_;
            break;
        case Type_Bool:
            convertedValue_ = valueIntEnumBool_ ? "true" : "false";
            break;
        default:
            convertedValue_ = "";
            break;
        }

        return convertedValue_.c_str();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterDefinition::gdParameterDefinition()
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterDefinition::~gdParameterDefinition()
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdChar* gdParameterDefinition::GetName() const
    {
        return name_.c_str();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterDefinition::SetName( const gdChar* val )
    {
        name_ = val;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdParameterValue& gdParameterDefinition::GetDefaultValue() const
    {
        return defaultValue_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterDefinition::SetDefaultValue( const gdParameterValue& val )
    {
        defaultValue_ = val;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdBool gdParameterDefinition::GetIsValid() const
    {
        gdBool valid = true;

        valid &= !name_.empty();
        valid &= !defaultValue_.IsEnum() || defaultValue_.GetEnumValueCount() > 0;

        return valid;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterPair::gdParameterPair()
    {

    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterPair::~gdParameterPair()
    {

    }
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdChar* gdParameterPair::GetName() const
    {
        return name_.c_str();
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterPair::SetName( const gdChar* name )
    {
        name_ = name;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    gdParameterValue* gdParameterPair::GetValue()
    {
        return &value_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdParameterValue* gdParameterPair::GetValue() const
    {
        return &value_;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    void gdParameterPair::SetParameterDefinition( const gdParameterDefinition& paramDef )
    {
        definition_ = paramDef;
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const gdParameterDefinition& gdParameterPair::GetParameterDefinition() const
    {
        return definition_;
    }
}
