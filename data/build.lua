databuilder = require "databuilder"fs = require "filesystem"gpuprog = require "gpuprogram"texture = require "texture"material = require "material"mesh = require "mesh"font = require "font"print("Starting custom build script")databuilder.sourcerootpath("C:/dev/heart_lua/data")--fs.currentpath())databuilder.destrootpath(string.format("%s/deploy/game/GAMEDATA","C:/dev/heart_lua"))--fs.currentpath()))databuilder.addbuilder {    typename="texture",    buildfunc= function (inputfiles, depfiles, params, path)        return texture.compile(inputfiles, depfiles, params, path)    end,}databuilder.addbuilder {    typename="gpu_prog",    buildfunc= function (inputfiles, depfiles, params, path)        return gpuprog.compile(inputfiles, depfiles, params, path)    end,}databuilder.addbuilder {    typename="mat_fx",    buildfunc= function (inputfiles, depfiles, params, path)        return material.compile(inputfiles, depfiles, params, path)    end,}databuilder.addbuilder {    typename="mesh",    buildfunc= function (inputfiles, depfiles, params, path)        return mesh.compile(inputfiles, depfiles, params, path)    end,}databuilder.addbuilder {    typename="font",    buildfunc= function (inputfiles, depfiles, params, path)        return font.compile(inputfiles, depfiles, params, path)    end,}databuilder.addresource{    package="MATERIALS",    resname="NARUTO_TEST",    restype="texture",    inputfiles={        "src://textures/naruto_test.dds"    },    parameters={        sRGB=true    },}databuilder.addresource{    package="MATERIALS",    resname="LIGHT",    restype="texture",    inputfiles={        "src://textures/light.dds"    },    parameters={        sRGB=true    },}databuilder.addresource{    package="MATERIALS",    resname="MINE",    restype="texture",    inputfiles={        "src://textures/mine.dds"    },    parameters={        sRGB=true    },}-- Materials & Shaders Util varslocal infiles=nillocal depfiles=nillocal progparams=nil-- Common Materials & Shadersinfiles={"src://shaders/sibenik.c"}progparams={    entry="mainColFP",    profile="ps_4_0",    defines={        TESTDEFINE="1",    },}depfiles = gpuprog.preprocess("src://shaders/sibenik.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="BLINNPHONGCOL_FP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/sibenik.c"}progparams.entry="mainColVP"progparams.profile="vs_4_0"defines={}depfiles = gpuprog.preprocess("src://shaders/sibenik.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="BLINNPHONGCOL_VP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/sibenik.c"}progparams.entry="mainFP"progparams.profile="ps_4_0"defines={}depfiles = gpuprog.preprocess("src://shaders/sibenik.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="BLINNPHONG_FP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/sibenik.c"}progparams.entry="mainVP"progparams.profile="vs_4_0"defines={}depfiles = gpuprog.preprocess("src://shaders/sibenik.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="BLINNPHONG_VP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/minecraft_style.c"}progparams.entry="mainAlphaCutoutFP"progparams.profile="ps_4_0"defines={}depfiles = gpuprog.preprocess("src://shaders/minecraft_style.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="MINEALPHATESTFP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/minecraft_style.c"}progparams.entry="mainFP"progparams.profile="ps_4_0"defines={}depfiles = gpuprog.preprocess("src://shaders/minecraft_style.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="MINEFP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/minecraft_style.c"}progparams.entry="mainVP"progparams.profile="vs_4_0"defines={}depfiles = gpuprog.preprocess("src://shaders/minecraft_style.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="MINEVP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/perlin.c"}progparams.entry="csPerlinNoise"progparams.profile="cs_5_0"defines={}depfiles = gpuprog.preprocess("src://shaders/perlin.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="PERLIN_CS",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/blur_blit.c"}progparams.entry="mainVP"progparams.profile="vs_5_0"defines={}depfiles = gpuprog.preprocess("src://shaders/blur_blit.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="BLUR_BLIT_VP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}--infiles={"src://shaders/blur_blit.c"}progparams.entry="BlitColor_PS"progparams.profile="ps_5_0"defines={}depfiles = gpuprog.preprocess("src://shaders/blur_blit.c", progparams)databuilder.addresource{    package="MATERIALS",    resname="BLUR_BLIT_FP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}------local materialpath="src://materials/minemat.mfx"databuilder.addresource{    package="MATERIALS",    resname="MINEMAT",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}materialpath="src://materials/minemat_cutout.mfx"databuilder.addresource{    package="MATERIALS",    resname="MINEMAT_CUTOUT",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}materialpath="src://materials/minemat_trans.mfx"databuilder.addresource{    package="MATERIALS",    resname="MINEMAT_TRANS",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}---- package: COMPLEXMESH1--databuilder.addresource{    package="COMPLEXMESH1",    resname="LOSTEMPIRE",    restype="mesh",    inputfiles={"src://mesh/lost_empire.mdf"},}---- package: COMPLEXMESH2--databuilder.addresource{    package="COMPLEXMESH2",    resname="HOUSE",    restype="mesh",    inputfiles={"src://mesh/house.mdf"},}---- package: INSTANCETEST--databuilder.addresource{    package="INSTANCETEST",    resname="BOCO",    restype="mesh",    inputfiles={"src://mesh/boco_inst.mdf"}}materialpath="src://materials/boco_mat_inst.mfx"databuilder.addresource{    package="INSTANCETEST",    resname="BOCOINSTMAT",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}infiles={"src://shaders/boco_inst.c"}progparams={    entry="mainFP",    profile="ps_4_0",    defines={},}depfiles = gpuprog.preprocess("src://shaders/boco_inst.c", progparams)databuilder.addresource{    package="INSTANCETEST",    resname="BOCO_FP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}infiles={"src://shaders/boco_inst.c"}progparams={    entry="mainInstVP",    profile="vs_4_0",    defines={},}depfiles = gpuprog.preprocess("src://shaders/boco_inst.c", progparams)databuilder.addresource{    package="INSTANCETEST",    resname="BOCO_VP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}---- package: UNITTEST--databuilder.addresource{    package="UNITTEST",    resname="BOCO",    restype="mesh",    inputfiles={"src://mesh/boco.mdf"},}infiles={"src://shaders/boco_inst.c"}progparams={    entry="mainFP",    profile="ps_4_0",    defines={},}depfiles = gpuprog.preprocess("src://shaders/boco_inst.c", progparams)databuilder.addresource{    package="UNITTEST",    resname="BOCO_FP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}infiles={"src://shaders/boco_inst.c"}progparams={    entry="mainVP",    profile="vs_4_0",    defines={},}depfiles = gpuprog.preprocess("src://shaders/boco_inst.c", progparams)databuilder.addresource{    package="UNITTEST",    resname="BOCO_VP",    restype="gpu_prog",    inputfiles=infiles,    depfiles=depfiles,    parameters=progparams}materialpath="src://materials/boco_mat.mfx"databuilder.addresource{    package="UNITTEST",    resname="BOCO_MAT",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}--databuilder.addresource{--    package="UNITTEST",--    resname="DEBUG_FONT",--    restype="font",--    inputfiles={"src://fonts/debug/debug.fnt"},--    parameters={--        headeroutput="src://debug_font_data.c"--    },--}databuilder.addresource{    package="UNITTEST",    resname="DEBUG_FONT_PAGE",    restype="texture",    inputfiles={"src://fonts/debug/debug_0.dds"},    parameters={        sRGB=false    },}---- SIBENIK--materialpath="src://materials/sibenik_vcol.mfx"databuilder.addresource{    package="SIBENIK",    resname="KAMENBASE",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}materialpath="src://materials/sibenik_brick.mfx"databuilder.addresource{    package="SIBENIK",    resname="KAMENBRICK",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}materialpath="src://materials/sibenik_red_carpet.mfx"databuilder.addresource{    package="SIBENIK",    resname="KAMENRED",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}materialpath="src://materials/sibenik_stup.mfx"databuilder.addresource{    package="SIBENIK",    resname="KAMENSTUP",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}materialpath="src://materials/sibenik_tiles.mfx"databuilder.addresource{    package="SIBENIK",    resname="KAMENTILES",    restype="mat_fx",    inputfiles={materialpath,},    depfiles=material.scanincludes(materialpath),}databuilder.addresource{    package="SIBENIK",    resname="KAMEN",    restype="texture",    inputfiles={        "src://mesh/sibenik/kamen.dds"    },    parameters={        sRGB=true    },}databuilder.addresource{    package="SIBENIK",    resname="KAMEN-BUMP",    restype="texture",    inputfiles={        "src://mesh/sibenik/kamen-bump.dds"    },    parameters={        sRGB=false    },}databuilder.addresource{    package="SIBENIK",    resname="KAMEN-STUP",    restype="texture",    inputfiles={        "src://mesh/sibenik/kamen-stup.dds"    },    parameters={        sRGB=true    },}databuilder.addresource{    package="SIBENIK",    resname="MRAMOR6X6",    restype="texture",    inputfiles={        "src://mesh/sibenik/mramor6x6.dds"    },    parameters={        sRGB=true    },}databuilder.addresource{    package="SIBENIK",    resname="MRAMOR6X6-BUMP",    restype="texture",    inputfiles={        "src://mesh/sibenik/mramor6x6-bump.dds"    },    parameters={        sRGB=false    },}databuilder.addresource{    package="SIBENIK",    resname="SIBENIK",    restype="mesh",    inputfiles={"src://mesh/sibenik.mdf"},}