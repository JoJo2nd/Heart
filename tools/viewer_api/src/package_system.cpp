/********************************************************************

    filename:   package_system.cpp  
    
    Copyright (c) 31:12:2012 James Moran
    
    This software is provided 'as-is', without any express or implied
    warranty. In no event will the authors be held liable for any damages
    arising from the use of this software.
    
    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:
    
    1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software
    in a product, an acknowledgment in the product documentation would be
    appreciated but is not required.
    
    2. Altered source versions must be plainly marked as such, and must not be
    misrepresented as being the original software.
    
    3. This notice may not be removed or altered from any source
    distribution.

*********************************************************************/

#include "viewer_api_config.h"
#include "impl/package_impl.h"
#include "impl/package_system_impl.h"
#include "impl/resource_impl.h"
#include "package_system.h"
#include "boost/shared_ptr.hpp"
#include "boost/filesystem.hpp"
#include <assert.h>

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vPackageSystem::vPackageSystem()
{
    impl_=new vImpl(this);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vPackageSystem::~vPackageSystem()
{
    delete impl_; 
    impl_=NULL;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

bool vPackageSystem::initialiseSystem(const wchar_t* datapath)
{
    return impl_->initialiseSystem(datapath);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

bool vPackageSystem::serialise()
{
    return impl_->serialise();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

size_t vPackageSystem::getPackageCount() const
{
    return impl_->getPackageCount();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vPackage* vPackageSystem::getPackage(size_t pkg) const
{
    return impl_->getPackage(pkg);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vPackage* vPackageSystem::getPackage(const char* pkg) const
{
    return impl_->getPackage(pkg);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResourceTypeID vPackageSystem::registerType(const char* ext)
{
    return impl_->registerType(ext);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const char* vPackageSystem::getTypeExt(vResourceTypeID type) const
{
    return impl_->getTypeExt(type);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResourceTypeID vPackageSystem::getTypeID(const char* ext)
{
    return impl_->getTypeID(ext);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vPackageSystem::getResourcesOfType(vResourceTypeID type, std::vector<vResource*>* outarray) const
{
    impl_->getResourcesOfType(type, outarray);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vPackage::vPackage()
    : impl_(new vImpl())
{

}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vPackage::~vPackage()
{
    delete impl_; impl_=NULL;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

size_t vPackage::getHeapSize() const
{
    return impl_->getHeapSize();
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vPackage::setHeapSize(size_t sz) const
{
    impl_->setHeapSize(sz);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

size_t vPackage::getResourceCount() const
{
    return impl_->getResourceCount();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResource* vPackage::getResourceInfo(size_t res) const
{
    return impl_->getResourceInfo(res);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResource* vPackage::addResourceInfo(const char* res, vResourceTypeID type)
{
    return impl_->addResourceInfo(res, type);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vErrorCode vPackage::removeResourceInfo(vResource* res)
{
    return impl_->removeResourceInfo(res);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const char* vPackage::getName() const
{
    return impl_->getName();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResource* vPackage::getResourceInfoByName(const char* asset)
{
    return impl_->getResourceInfoByName(asset);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vPackage::getResourcesOfType(vResourceTypeID type, std::vector<vResource*>* outarray) const
{
    impl_->getResourcesOfType(type, outarray);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResource::vResource(vPackage::vImpl* pkg, const char* name)
    : impl_(new vImpl(pkg, name))
{

}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResource::~vResource()
{
    delete impl_; impl_ = NULL;
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const char* vResource::getName() const
{
    return impl_->getName();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vResource::setName(const char* name)
{
    impl_->setName(name);
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResourceTypeID vResource::getType() const
{
    return impl_->getType();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vResource::setType(vResourceTypeID type)
{
    impl_->setType(type);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

size_t vResource::getParameterCount() const
{
    return impl_->getParameterCount();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResourceParameter* vResource::getParameter(size_t idx) const
{
    return impl_->getParameter(idx);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResourceParameter* vResource::getParameter(const char* name) const
{
    return impl_->getParameter(name);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vResource::addParameter(const vResourceParameter& param)
{
    impl_->addParameter(param);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vResource::removeParameter(const vResourceParameter& param)
{
    impl_->removeParameter(param);
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vResource::removeParameter(const char* paramname)
{
    impl_->removeParameter(paramname);
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vResource::setInputFilePath(const char* filepath)
{
    impl_->setInputFilePath(filepath);
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const char* vResource::getPackageName() const
{
    return impl_->getPackageName();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const char* vResource::getFullAssetName() const
{
    return impl_->getFullAssetName();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const char* vResource::getInputFilePath() const
{
    return impl_->getInputFilePath();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResourceParameter::vResourceParameter()
    : impl_(new vImpl())
{

}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

vResourceParameter::~vResourceParameter()
{
    delete impl_; impl_ = NULL;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const char* vResourceParameter::getName() const
{
    return impl_->getName();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vResourceParameter::setName(const char* name)
{
    impl_->setName(name);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const char* vResourceParameter::getValue() const
{
    return impl_->getValue();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void vResourceParameter::setValue(const char* val)
{
    impl_->setValue(val);
}
