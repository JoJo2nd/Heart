import "resource_common.proto";
import "resource_renderstate.proto";

package Heart.proto;

enum MaterialParameterType {
    matparam_none    = 0;
    matparam_float   = 1;
    matparam_int     = 2;
    matparam_texture = 3;
}

message SamplerState {
    optional renderstate.SamplerState filter = 1;
    optional renderstate.SamplerBorder addressU = 2;
    optional renderstate.SamplerBorder addressV = 3;
    optional renderstate.SamplerBorder addressW = 4;
    optional float  mipLODBias = 5;
    optional uint32 maxAnisotropy = 6;
    optional Colour borderColour = 7;
    optional float  minLOD = 8;
    optional float  maxLOD = 9;
}

message BlendState {
	optional bool   blendEnable = 1;			    
	optional renderstate.BlendOp srcBlend = 2;				    
	optional renderstate.BlendOp destBlend = 3;				    
	optional renderstate.BlendFunction blendOp = 4;				    
	optional renderstate.BlendOp srcBlendAlpha = 5;			    
	optional renderstate.BlendOp destBlendAlpha = 6;		        
	optional renderstate.BlendFunction blendOpAlpha = 7;			    
	optional uint32 renderTargetWriteMask = 8;	//  hUint32               
}

message DepthStencilState {
    optional bool depthEnable = 1;          
    optional uint32 depthWriteMask = 2;	      
    optional renderstate.FunctionCompare depthFunc = 3;			  
    optional bool stencilEnable = 4;		  
    optional uint32 stencilReadMask = 5;	  // hUint32           
    optional uint32 stencilWriteMask = 6;	  // hUint32           
    optional renderstate.StencilOp stencilFailOp = 7;		  
    optional renderstate.StencilOp stencilDepthFailOp = 8;   
    optional renderstate.StencilOp stencilPassOp = 9;		  
    optional renderstate.FunctionCompare stencilFunc = 10;		  
    optional uint32 stencilRef = 11;		  // hUint32           
}

message RasterizerState {
    optional renderstate.FillMode fillMode = 1;                  
    optional renderstate.CullMode cullMode = 2;                  
    optional uint32 frontCounterClockwise = 3;     
    optional uint32 depthBias = 4;                       
    optional float depthBiasClamp = 5;             
    optional float slopeScaledDepthBias = 6;      
    optional uint32 depthClipEnable = 7;           
    optional uint32 scissorEnable = 8;             
}

message MaterialPass {
	optional BlendState blend = 1;
	optional DepthStencilState depthStencil = 2;
	optional RasterizerState rasterizer = 3;
	optional string vertex = 4;
	optional string pixel = 5;
	optional string geometry = 6;
	optional string hull = 7;
	optional string domain = 8;
	optional string compute = 9;
}

message MaterialTechnique {
	required string techniqueName = 1;
	repeated MaterialPass passes = 2;
	optional bool transparent = 3;
	optional uint32 layer = 4;
}

message MaterialGroup {
	required string groupName = 1;
	repeated MaterialTechnique technique = 2;
}

message MaterialSampler   {
	required string samplerName = 1;
	optional SamplerState samplerState = 2;
}

message MaterialParameter {
	required string paramName = 1;
	optional string resourceId = 2;
	repeated float  floatValues = 3;
	repeated sint32 intValues = 4;
	repeated Colour colourValues = 5;
}

message MaterialResource {
	repeated MaterialSampler samplers = 1;
	repeated MaterialParameter parameters = 2;
	repeated MaterialGroup groups = 3;
}