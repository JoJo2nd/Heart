/********************************************************************
	created:	2010/11/07
	created:	7:11:2010   21:17
	filename: 	VertexBuffer.cpp	
	author:		James
	
	purpose:	
*********************************************************************/

#include "Common.h"
#include "hVertexBuffer.h"
#include "hRenderer.h"

namespace Heart
{
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::Release()
	{
#ifdef HEART_OLD_RENDER_SUBMISSION
		renderer_->NewRenderCommand< Cmd::ReleaseVertexBuffer >( this );
#endif // HEART_OLD_RENDER_SUBMISSION
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::Lock()
	{
// 		hcAssert( lockPtr_ == NULL );
// 		lockPtr_ = (hByte*)renderer_->AquireTempRenderMemory( pVtxDecl_->Stride()*vtxCount_ );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::Unlock()
	{
#ifdef HEART_OLD_RENDER_SUBMISSION
		renderer_->NewRenderCommand< Cmd::FlushVertexBufferData >( this, lockPtr_, pVtxDecl_->Stride()*vtxCount_ );
#endif // HEART_OLD_RENDER_SUBMISSION
		lockPtr_ = NULL;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::FlushVertexData( void* dataPtr, hUint32 size )
	{
// 		void* mapped = pImpl()->Map();
// 		if ( mapped )
// 		{
// 			memcpy( mapped, dataPtr, size );
// 		}
// 		pImpl()->Unmap( mapped );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::SetData( hUint32 idx, hUint32 stride, hUint32 offset, void* pData, hUint32 size )
	{
		hcAssertMsg( lockPtr_, "SetData called outside of lock\n" );
		hcAssertMsg( idx < vtxCount_, "Out of Range Vertex Buffer access" );
		memcpy( lockPtr_ + ( ( idx * stride ) + offset ), pData, size );
	}

}