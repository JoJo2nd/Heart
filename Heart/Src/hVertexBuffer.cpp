/********************************************************************
	created:	2010/11/07
	created:	7:11:2010   21:17
	filename: 	VertexBuffer.cpp	
	author:		James
	
	purpose:	
*********************************************************************/

#include "Common.h"
#include "hVertexBuffer.h"
#include "hRenderer.h"
#include "hRenderCommon.h"

namespace Heart
{
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::Release()
	{
		renderer_->NewRenderCommand< Cmd::ReleaseVertexBuffer >( this );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::Lock()
	{
		hcAssert( lockPtr_ == NULL );
		lockPtr_ = (hByte*)renderer_->AquireTempRenderMemory( pVtxDecl_->Stride()*vtxCount_ );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::Unlock()
	{
		renderer_->NewRenderCommand< Cmd::FlushVertexBufferData >( this, lockPtr_, pVtxDecl_->Stride()*vtxCount_ );
		lockPtr_ = NULL;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::FlushVertexData( void* dataPtr, hUint32 size )
	{
		void* mapped = pImpl()->Map();
		if ( mapped )
		{
			memcpy( mapped, dataPtr, size );
		}
		pImpl()->Unmap( mapped );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hVertexBuffer::SetData( hUint32 idx, hUint32 stride, hUint32 offset, void* pData, hUint32 size )
	{
		hcAssertMsg( lockPtr_, "SetData called outside of lock\n" );
		hcAssertMsg( idx < vtxCount_, "Out of Range Vertex Buffer access" );
		memcpy( lockPtr_ + ( ( idx * stride ) + offset ), pData, size );
	}

}