/********************************************************************
	created:	2008/11/23
	created:	23:11:2008   12:04
	filename: 	hrVertexDeclarationManager.cpp
	author:		James
	
	purpose:	
*********************************************************************/

#include "Common.h"
#include "Heart.h"
#include "hVertexDeclarationManager.h"
#include "hVertexDeclarations.h"
#include "hRenderer.h"

namespace Heart
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

hVertexDeclarationManager::hVertexDeclarationManager( hRenderer& renderer ) :
	renderer_( renderer )
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

hVertexDeclarationManager::~hVertexDeclarationManager()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

hVertexDeclaration* hVertexDeclarationManager::GetVertexDeclartion( hUint32 flags )
{
	hVertexDeclaration* pRet = NULL;
	VtxDeclMap::iterator i = vertexDeclarations_.find( flags );

	if ( i == vertexDeclarations_.end() )
	{
		//hehe, VD
		hVertexDeclaration* pVtxDecl;
		renderer_.CreateVertexDeclaration( pVtxDecl, flags );
		vertexDeclarations_[ flags ] = pVtxDecl;
		pRet = pVtxDecl;
	}
	else
	{
		pRet = i->second;
	}

	return pRet;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void hVertexDeclarationManager::Destroy()
{
	for ( VtxDeclMap::iterator i = vertexDeclarations_.begin(), iend = vertexDeclarations_.end(); i != iend ; ++i )
	{
		renderer_.DestroyVertexDeclaration( i->second );
		delete i->second;
	}
	vertexDeclarations_.clear();
}

}