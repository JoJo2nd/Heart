/********************************************************************
	created:	2009/08/30
	created:	30:8:2009   10:40
	filename: 	hrRenderCommon.h	
	author:		James
	
	purpose:	
*********************************************************************/
#ifdef HEART_OLD_RENDER_SUBMISSION

#ifndef HRRENDERCOMMON_H__
#define HRRENDERCOMMON_H__

#include "hRendererConstants.h"
#include "hMatrix.h"
#include "hVector.h"
#include "hAABB.h"
#include "hMaterial.h"

namespace Heart
{
	class hRenderer;
	struct hRenderFrameStatsCollection;
	class hVertexBuffer;
	class hIndexBuffer;
	class hVertexDeclaration;
	class hTextureBase;
	class hRenderTargetTexture;
	class DepthSurface;
	class hMaterial;
	class hMesh;
	class hCamera;
	class hCommandBufferList;

namespace Cmd
{
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

//#define DEBUG_RENDERING

#ifdef DEBUG_RENDERING
#define PRINT_RENDER()		hcPrintf( "RenderOut::"__FUNCTION__ );
#else
#define PRINT_RENDER()
#endif

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class RenderCmdBase
	{
	public:

		RenderCmdBase() { size_ = hErrorCode; breakMe_= hFalse; };
		virtual					~RenderCmdBase() {};

		virtual void			Execute( hRenderer* ) = 0;

		virtual hBool			DestroyCommand() const { return hTrue; }

		hUint32					size_;//< Zero if end frame command
		hBool					breakMe_;
	};

	//////////////////////////////////////////////////////////////////////////
	// render Node classes ///////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class EndFrame : public RenderCmdBase
	{
	public:

		EndFrame() { size_ = 0; };
		virtual ~EndFrame() {};
		void				Execute( hRenderer* pRenderer_ ) {PRINT_RENDER();};

	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class NullCmd : public RenderCmdBase
	{
	public:

		NullCmd() { size_ = sizeof( NullCmd ); };
		virtual ~NullCmd() {}
		void				Execute( hRenderer* pRenderer_ ) {PRINT_RENDER();}
	};

	///////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////

	class CollectRenderStats : public RenderCmdBase
	{
	public:

		CollectRenderStats( hRenderFrameStatsCollection* framestats );
		virtual ~CollectRenderStats();

		void				Execute( hRenderer* pRenderer );

		hRenderFrameStatsCollection*	frameStats_;
	};


	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class IncrementRenderStatsPass : public RenderCmdBase
	{
	public:

		IncrementRenderStatsPass()
		{
			size_ = sizeof( IncrementRenderStatsPass );
		}

		void				Execute( hRenderer* pRenderer );
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class BeginDebuggerEvent : public RenderCmdBase
	{
	public:
		BeginDebuggerEvent( const hChar* name );
		~BeginDebuggerEvent();

		void Execute( hRenderer* pRenderer );

		const hChar* name_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class EndDebuggerEvent : public RenderCmdBase
	{
	public:
		EndDebuggerEvent();

		void Execute( hRenderer* pRenderer );

		hUint32 b;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class FlushIndexBufferData : public RenderCmdBase
	{
	public:
		FlushIndexBufferData( hIndexBuffer* indexbuffer, void* data, hUint32 size );
		~FlushIndexBufferData();

		void Execute( hRenderer* renderer );

		hIndexBuffer*	indexBuffer_;
		void*			data_;
		hUint32			dataSize_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ReleaseIndexBuffer : public RenderCmdBase
	{
	public:

		ReleaseIndexBuffer( hIndexBuffer* pindexbuffer );
		virtual ~ReleaseIndexBuffer();
		
		void Execute( hRenderer* pRenderer );

		hIndexBuffer* pIndexBuffer_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class FlushVertexBufferData : public RenderCmdBase
	{
	public:
		FlushVertexBufferData( hVertexBuffer* vertexbuffer, void* data, hUint32 size );
		virtual ~FlushVertexBufferData();

		void Execute( hRenderer* renderer );

		hVertexBuffer*	vertexBuffer_;
		void*			data_;
		hUint32			dataSize_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ReleaseVertexBuffer : public RenderCmdBase
	{
	public:

		ReleaseVertexBuffer( hVertexBuffer* pindexbuffer );
		virtual ~ReleaseVertexBuffer();

		void Execute( hRenderer* pRenderer );

		hVertexBuffer* pVertexBuffer_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ReleaseTexture : public RenderCmdBase
	{
	public:

		ReleaseTexture( hTexture* ptex );
		virtual ~ReleaseTexture();

		void Execute( hRenderer* pRenderer );

		hTextureBase* pTexture_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class FlushTextureLevel : public RenderCmdBase
	{
	public:
		FlushTextureLevel( hTexture* tex, hUint32 level, hUint32 pitch, void* data );
		virtual ~FlushTextureLevel();

		void Execute( hRenderer* renderer );

		hTexture*	tex_;
		hUint32		level_;
		hUint32		pitch_;
		void*		data_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ReleaseRenderTarget : public RenderCmdBase
	{
	public:

		ReleaseRenderTarget( hRenderTargetTexture* ptex );
		virtual ~ReleaseRenderTarget();

		void Execute( hRenderer* pRenderer );

		hRenderTargetTexture* pTexture_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ReleaseMaterial : public RenderCmdBase
	{
	public:

		ReleaseMaterial( hMaterial* pmat );
		virtual ~ReleaseMaterial();

		void Execute( hRenderer* pRenderer );

		hMaterial* pMaterial_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ReleaseMesh : public RenderCmdBase
	{
	public:

		ReleaseMesh( hMesh* pmesh );
		virtual ~ReleaseMesh();

		void Execute( hRenderer* pRenderer );

		hMesh* pMesh_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ReleaseDepthSurface : public RenderCmdBase
	{
	public:
		ReleaseDepthSurface( hRenderTargetTexture* pSurface );
		~ReleaseDepthSurface();

		void Execute( hRenderer* pRenderer );

		hRenderTargetTexture* pSurface_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetDepthBuffer : public RenderCmdBase
	{
	public:
		SetDepthBuffer( hRenderTargetTexture* pSurface );
		~SetDepthBuffer();

		void					Execute( hRenderer* pRenderer );

		hRenderTargetTexture* pSurface_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetViewport : public RenderCmdBase
	{
	public:
		SetViewport( hViewport viewport );
		~SetViewport();

		void			Execute( hRenderer* pRenderer_ );
		
		hViewport		viewport_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetRenderTarget : public RenderCmdBase
	{
	public:
		SetRenderTarget( hUint32 idx, hRenderTargetTexture* pTarget );
		~SetRenderTarget();

		void			Execute( hRenderer* pRenderer );

		hRenderTargetTexture*	pTarget_;
		hUint32							targetIdx_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

 	class SetMaterialColorParameter : public RenderCmdBase
 	{
 	public:
		SetMaterialColorParameter( hMaterial* pMat, const hShaderParameter* param, const hColour& f );
		~SetMaterialColorParameter();
 
 		void Execute( hRenderer* pRenderer );
 
		hMaterial*					pMat_;
		const hShaderParameter*		parameter_;
 		hFloat								floatArray_[ 4 ];
 	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetMaterialFloatParameter : public RenderCmdBase
	{
	public:
		SetMaterialFloatParameter( hMaterial* pMat, const hShaderParameter* param, hFloat f );
		~SetMaterialFloatParameter();

		void Execute( hRenderer* pRenderer );

		hMaterial*					pMat_;
		const hShaderParameter*		parameter_;
		hFloat								val_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetMaterialFloat2Parameter : public RenderCmdBase
	{
	public:
		SetMaterialFloat2Parameter( hMaterial* pMat, const hShaderParameter* param, const hFloat* f );
		~SetMaterialFloat2Parameter();

		void Execute( hRenderer* pRenderer );

		hMaterial*					pMat_;
		const hShaderParameter*		parameter_;
		hFloat								val_[2];
	};


	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetMaterialFloat3Parameter : public RenderCmdBase
	{
	public:
		SetMaterialFloat3Parameter( hMaterial* pMat, const hShaderParameter* param, const hFloat* f );
		~SetMaterialFloat3Parameter();

		void Execute( hRenderer* pRenderer );

		hMaterial*					pMat_;
		const hShaderParameter*		parameter_;
		hFloat								val_[3];
	};


	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetMaterialFloat4Parameter : public RenderCmdBase
	{
	public:
		SetMaterialFloat4Parameter( hMaterial* pMat, const hShaderParameter* param, const hFloat* f );
		~SetMaterialFloat4Parameter();

		void Execute( hRenderer* pRenderer );

		hMaterial*					pMat_;
		const hShaderParameter*		parameter_;
		hFloat								val_[4];
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetMaterialFloat4x4Parameter : public RenderCmdBase
	{
	public:
		SetMaterialFloat4x4Parameter( hMaterial* pMat, const hShaderParameter* param, const hFloat* f );
		~SetMaterialFloat4x4Parameter();

		void Execute( hRenderer* pRenderer );

		hMaterial*					pMat_;
		const hShaderParameter*	parameter_;
		hFloat								val_[16];
	};


	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetMaterial : public RenderCmdBase
	{
	public:
		SetMaterial( hMaterial* pMat );
		~SetMaterial();
		void				Execute( hRenderer* pRenderer_ );
		
		hMaterial*		pMat_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class BindTexture : public RenderCmdBase
	{
	public:
		BindTexture( hMaterial* pMat, const hShaderParameter* pTexParam, const hResourceHandle< hTextureBase >& pTex );
		~BindTexture();
		void		Execute( hRenderer* pRenderer );

		const hResourceHandle< hTextureBase >	pTex_;
		hMaterial*							pMat_;
		const hShaderParameter*				pTexParam_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetProjectionMatrix : public RenderCmdBase
	{
	public:
		SetProjectionMatrix( const Heart::hMatrix* pMat );
		~SetProjectionMatrix();
		void Execute( hRenderer* pRenderer );

		Heart::hMatrix		projection_;

	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetViewMatrix : public RenderCmdBase
	{
	public:
		SetViewMatrix( const Heart::hMatrix* pMat );
		~SetViewMatrix();
		void Execute( hRenderer* pRenderer );

		Heart::hMatrix		view_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetWorldMatrix : public RenderCmdBase
	{
	public:
		SetWorldMatrix( const Heart::hMatrix* pMat );
		~SetWorldMatrix();
		void Execute( hRenderer* pRenderer );

		Heart::hMatrix		world_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetVertexDecl : public RenderCmdBase
	{
	public:
		SetVertexDecl( hVertexDeclaration* pDecl );
		~SetVertexDecl();
		void				Execute( hRenderer* pRenderer );

		hVertexDeclaration*				pVertexDecl_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetStreams : public RenderCmdBase
	{
	public:
		SetStreams( hIndexBuffer* pIBuf, hVertexBuffer* pVBuf );
		~SetStreams();
		void						Execute( hRenderer* pRenderer );

		hIndexBuffer*		pIBuf_;
		hVertexBuffer*		pVBuf_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetPointLight : public RenderCmdBase
	{
	public:
		SetPointLight( const hVec3& position, hFloat minR, hFloat maxR, hFloat power, const hColour& diffuse, const hColour& spec, hFloat specExp );
		~SetPointLight();

		void			Execute( hRenderer* renderer );

		hColour diffuse_;
		hColour spec_;
		hVec3 position_;
		hFloat minR_;
		hFloat maxR_;
		hFloat power_;
		hFloat specExp_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetDirectionLight : public RenderCmdBase
	{
	public:
		SetDirectionLight( const hVec3& direction, hFloat power, const hColour& diffuse, const hColour& spec, hFloat specExp );
		~SetDirectionLight();

		void			Execute( hRenderer* renderer );

		hColour diffuse_;
		hColour spec_;
		hVec3 direction_;
		hFloat power_;
		hFloat specExp_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetSpotLight : public RenderCmdBase
	{
	public:
		SetSpotLight( const hVec3& position, const hVec3& dir, hFloat minR, hFloat maxR, hFloat falloff, hFloat power, const hColour& diffuse, const hColour& spec, hFloat specExp );
		~SetSpotLight();

		void			Execute( hRenderer* renderer );

		hColour diffuse_;
		hColour spec_;
		hVec3 position_;
		hVec3 direction_;
		hFloat minR_;
		hFloat maxR_;
		hFloat falloff_;
		hFloat power_;
		hFloat specExp_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class DrawPrimative : public RenderCmdBase
	{
	public:
		DrawPrimative( hUint32 nPrimatives );
		~DrawPrimative();
		void				Execute( hRenderer* pRenderer_ );

		hUint32 nPrimatives_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class DrawVertexStream : public RenderCmdBase
	{
	public:
		DrawVertexStream( hVertexBuffer* vtxBuf, PrimitiveType primType );
		~DrawVertexStream();

		void Execute( hRenderer* renderer );

		hVertexBuffer* vtxBuf_;
		PrimitiveType primType_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class DrawMesh : public RenderCmdBase
	{
	public:
		DrawMesh( const hMesh* mesh );
		~DrawMesh();

		void					Execute( hRenderer* pRenderer );

		const hIndexBuffer*		pIBuf_;
		const hVertexBuffer*		pVBuf_;
		const hMaterial*			pMat_;
		hUint32							nPrims_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetAlphaBlend : public RenderCmdBase
	{
	public:
		SetAlphaBlend( RENDER_STATE_VALUE enable, RENDER_STATE_VALUE blendFunction, RENDER_STATE_VALUE src, RENDER_STATE_VALUE dst );
		~SetAlphaBlend();
		void				Execute( hRenderer* pRenderer_ );
	
		RENDER_STATE_VALUE		enable_;
		RENDER_STATE_VALUE		blendFunc_;
		RENDER_STATE_VALUE		srcBlend_;
		RENDER_STATE_VALUE		dstBlend_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetZTest : public RenderCmdBase
	{
	public:
		SetZTest( RENDER_STATE_VALUE enableTest, RENDER_STATE_VALUE enableWrite, RENDER_STATE_VALUE cmp );
		~SetZTest();

		void Execute( hRenderer* pRenderer );

		RENDER_STATE_VALUE		testEnable_;
		RENDER_STATE_VALUE		writeEnable_;
		RENDER_STATE_VALUE		cmp_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetScissorTest : public RenderCmdBase
	{
	public:
		SetScissorTest( hBool enable, ScissorRect* rect );
		~SetScissorTest();

		void Execute( hRenderer* renderer );

		hBool		enable_;
		ScissorRect rect_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

// 	class SetWireframeMode : public RenderCmdBase
// 	{
// 	public:
// 		SetWireframeMode( RENDER_STATE_VALUE enable );
// 		~SetWireframeMode();
// 
// 		void Execute( Renderer* pRenderer );
// 
// 		RENDER_STATE_VALUE	val_;
// 	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

// 	class SetCullMode : public RenderCmdBase
// 	{
// 	public:
// 		SetCullMode( RENDER_STATE_VALUE val );
// 		~SetCullMode();
// 
// 		void Execute( Renderer* prenderer );
// 
// 		RENDER_STATE_VALUE		cullmode_;
// 	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class SetFogMode : public RenderCmdBase
	{
	public:
		SetFogMode( hFloat fogstart, hFloat fogend, const hColour& colour );
		~SetFogMode();

		void Execute( hRenderer* prenderer );

		hFloat fogStart_;
		hFloat fogEnd_;
		hColour fogColour_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class DebugDrawLineList2D : public RenderCmdBase
	{
	public:
		DebugDrawLineList2D( hRenderer* pRenderer, Heart::hVec2* points, hUint32 nLines, hColour colour );
		~DebugDrawLineList2D();

		void Execute( hRenderer* pRenderer );
	
		hVertexDeclaration*				pVtxDecl_;
		void*							pLines_;
		hColour							colour_;
	};

#if 0

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class DebugDrawCross : public RenderCmdBase
	{
	public:
		DebugDrawCross( Renderer* pRenderer, Heart::Vec3 pos, const Heart::Matrix* m, hFloat size, Colour colour );

		void	Execute( Renderer* pRenderer );

		Heart::Matrix		m_;
		Colour					colour_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class DebugDrawAABB : public RenderCmdBase
	{
	public:
		DebugDrawAABB( const Heart::AABB* aabb, Renderer* pRenderer, Colour color );
		void Execute( Renderer* pRenderer );

		Colour						colour_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class DebugHoldFrame : public RenderCmdBase
	{
	public:
		DebugHoldFrame()
		{
			size_ = sizeof( DebugHoldFrame );
		}

		void Execute( Renderer* pRenderer );
	};
#endif

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class CommitState : public RenderCmdBase
	{
	public:
		CommitState();
		~CommitState();
		void				Execute( hRenderer* pRenderer_ );
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ClearScreen : public RenderCmdBase
	{
	public:
		ClearScreen( const hColour& clearColour );
		~ClearScreen();
		void				Execute( hRenderer* pRenderer_ );

		hColour		clearColour_;
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class ClearDepth : public RenderCmdBase
	{
	public:
		ClearDepth();
		~ClearDepth();
		void				Execute( hRenderer* pRenderer_ );
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class BeginScene : public RenderCmdBase
	{
	public:
		BeginScene();
		~BeginScene();
		void				Execute( hRenderer* pRenderer_ );
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class EndScene : public RenderCmdBase
	{
	public:
		EndScene();
		~EndScene();
		void				Execute( hRenderer* pRenderer_ );
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class FlipBuffers : public RenderCmdBase
	{
	public:
		FlipBuffers();
		~FlipBuffers();
		void				Execute( hRenderer* pRenderer_ );
	};
	
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

#if 0
	class DrawScreenQuad : public RenderCmdBase
	{
	public:

		DrawScreenQuad( Renderer* pRenderer, hiEffect* pEffect, const hChar* techName, TextureBase* pTex );

		void Execute( Renderer* pRenderer );

		struct Vtx
		{
			Heart::Vec3						pos_;
			Heart::Vec2						uv_;
		};

		hiEffect*						pEffect_;
		TextureBase*					pTexture_;
		Vtx								points_[ 6 ];
	};

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	class DrawScreenQuad2Tex : public DrawScreenQuad
	{
	public:
		
		DrawScreenQuad2Tex( Renderer* pRenderer, hiEffect* pEffect, const hChar* techName, TextureBase* pTex1, TextureBase* pTex2 ) :
		  DrawScreenQuad( pRenderer, pEffect, techName, pTex1 ),
		  pTexture2_( pTex2 )
		{
			size_ = sizeof( DrawScreenQuad2Tex );
		}

		void Execute( Renderer* pRenderer );

		TextureBase* pTexture2_;
	};
#endif
}
}

#endif // HRRENDERCOMMON_H__

#endif //HEART_OLD_RENDER_SUBMISSION