import os.path
import sys
import argparse
import string
import re
from xml.dom.minidom import getDOMImplementation
from xml.etree import ElementTree as et


def main():
    parser = argparse.ArgumentParser(prog="component_def_gen",description='Generates component definitions xml')
    parser.add_argument('-o','--output', nargs='?', default='COMPONENTS.XML', help='Output file path. Defaults to COMPONENTS.XML')
    parser.add_argument('-d','--dir', action='append' , help='Appends an Input direction to parse source code from. Search is recursive')

    args = parser.parse_args()

    components = {}

    for d in args.dir:
        for root, dirs, files in os.walk(d):
            for f in files:
                base, ext = os.path.splitext(f)
                if ext.lower() == '.cpp' or ext.lower() == '.cxx':
                    parse_file(components, os.path.join(root, f))
                
    doc = getDOMImplementation().createDocument(None,"componentdefs",None)
    top_element = doc.documentElement
    top_element.appendChild(doc.createComment("Autogenerated by component_def_gen.py from source"))

    for comp in components:
        add_component_to_dom(doc,top_element,comp,components[comp])
    
    ##doc.writexml(open(args.output,'w'),addindent='  ',newl='\n',encoding='UTF-8')
    uglyXml = doc.toprettyxml(indent='  ',encoding='UTF-8')

    text_re = re.compile('>\n\s+([^<>\s].*?)\n\s+</', re.DOTALL)    
    prettyXml = text_re.sub('>\g<1></', uglyXml)
    
    file = open(args.output,'w')
    file.write(prettyXml)
    file.close()

def parse_file(components, path):
    f = open(path, 'r')
    for line in f.readlines():
        line = string.strip(line)
        for match in re.findall(r'HEART_COMPONET_PROPERTIES_BEGIN\((\s*)(\S*)(\s*)\)',line):
            components[match[1]]['props'] = []
        for match in re.findall(r'HEART_DEFINE_COMPONENT_TYPE\((\s*)(\w*)(\s*),(\s*)"(.*?)"(\s*),(\s*)"(.*?)"(\s*)\)',line):
            components[match[1]] = {}
            components[match[1]]['name'] = match[4]
            components[match[1]]['doc'] = match[7]
        if 'HEART_COMPONET_PROPERTIES_END' in line:
            pass
        for match in re.findall(r'HEART_COMPONENT_PROPERTY\((\s*)(\w*)(\s*),(\s*)"(.*?)"(\s*),(\s*)(\w*)(\s*),(\s*)(\w*)(\s*),(\s*)"(.*?)"(\s*)\)',line):
            components[match[1]]['props'].append({'name': match[4],'type': match[10],'doc': match[13]})

def add_component_to_dom(doc,domnode,name,comp):
    ele = doc.createElement("component")
    ele.setAttribute('name',comp['name'])
    docele = doc.createElement('doc')
    docele.appendChild(doc.createTextNode(comp['doc']))
    ele.appendChild(docele)
    propsele = doc.createElement('properties')

    for prop in comp['props']:
        propele = doc.createElement('property')
        for data in prop:
            dele = doc.createElement(data)
            dele.appendChild(doc.createTextNode(prop[data]))
            propele.appendChild(dele)
        propsele.appendChild(propele)

    ele.appendChild(propsele)
    domnode.appendChild(ele)
    
if __name__ == '__main__':
    main()
