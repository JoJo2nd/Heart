/********************************************************************
    Written by James Moran
    Please see the file HEART_LICENSE.txt in the source's root directory.
*********************************************************************/

#include "base/hClock.h"
#include "base/hProfiler.h"
#include <time.h>

namespace Heart {
namespace hClock {
namespace {
	struct timespec clockRes_;
	struct timespec timeStart_;
	hUint64 clockDiv_; // divider to get to milliseconds
	hUint64 tick_;
	hUint64 lastTick_;
}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hFloat elapsed() {
		return elapsedMilli() / 1000.f;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint64 elapsedMilli()	{
		return elapsedNano() / clockDiv_;
	}

	hUint64 elapsedNano() {
		struct timespec time_now;
		clock_gettime(CLOCK_MONOTONIC, &time_now);
		return timeStart_.tv_nsec - time_now.tv_nsec / clockRes_.tv_nsec;	
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint64			deltams() {
		return tick_/clockDiv_;
	}
	
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hFloat			fdeltams() {
		return tick_ / (hFloat)clockDiv_;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hFloat			delta()	{
		return (tick_ / clockDiv_) / 1000.f;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint32			hours()	{
		return ( ( (hUint32)elapsed() / 60 ) / 60 );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint32			mins() {
		return ( (hUint32)elapsed() / 60 ) - ( hours() * 60 );
	}
	
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint32			secs() {
		return (hUint32)elapsed() - ( mins() * 60 );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void update() {
		tick_ = elapsedNano() - lastTick_;
		lastTick_ = elapsedNano();
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void initialise()
	{
		struct timespec res;
		hInt rc;

		rc = clock_getres(CLOCK_MONOTONIC, &clockRes_);
		hcAssert(!rc); // !!JM todo: handle other cases
		clock_gettime(CLOCK_MONOTONIC, &timeStart_);
		clockDiv_ = clockRes_.tv_nsec / 1000000;
		lastTick_ = elapsedNano();
	}

}// namespace hClock
}// namespace Heart