/********************************************************************

	filename: 	hClock.cpp	
	
	Copyright (c) 1:4:2012 James Moran
	
	This software is provided 'as-is', without any express or implied
	warranty. In no event will the authors be held liable for any damages
	arising from the use of this software.
	
	Permission is granted to anyone to use this software for any purpose,
	including commercial applications, and to alter it and redistribute it
	freely, subject to the following restrictions:
	
	1. The origin of this software must not be misrepresented; you must not
	claim that you wrote the original software. If you use this software
	in a product, an acknowledgment in the product documentation would be
	appreciated but is not required.
	
	2. Altered source versions must be plainly marked as such, and must not be
	misrepresented as being the original software.
	
	3. This notice may not be removed or altered from any source
	distribution.

*********************************************************************/

namespace Heart
{
namespace hClock
{
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	HEART_DLLEXPORT
	hInt64			Time_;
    HEART_DLLEXPORT
	hInt64			TimeMS_;
    HEART_DLLEXPORT
	hInt64			LastTime_;
    HEART_DLLEXPORT
	hUint32			TickMS_;
    HEART_DLLEXPORT
	hFloat			TickS_;
    HEART_DLLEXPORT
	hInt64			StartTime_;
    HEART_DLLEXPORT
	hInt64			Freq_;
    HEART_DLLEXPORT
	hInt64			FreqMicro_;

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	hFloat			elapsed()
	{
		return static_cast< hFloat >( (Time_ - StartTime_) / 1000.0f );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	hUint32			elapsedMS()
	{
		return static_cast< hUint32 >(Time_ - StartTime_);
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	hUint32			deltams()
	{
		return TickMS_;
	}
	
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	hFloat			fdeltams()
	{
		return static_cast< hFloat >( TickMS_ );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	hFloat			Delta()
	{
		return TickS_;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	hUint32			hours()
	{
		return ( ( (hUint32)elapsed() / 60 ) / 60 );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	hUint32			mins()
	{
		return ( (hUint32)elapsed() / 60 ) - ( hours() * 60 );
	}
	
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	hUint32			secs()
	{
		return (hUint32)elapsed() - ( mins() * 60 );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	void hClock::Update()
	{
        HEART_PROFILE_FUNC();
		if ( Freq_ != 0 )
		{
			LastTime_ = Time_;

			QueryPerformanceCounter( reinterpret_cast< LARGE_INTEGER* >( &Time_ ) );

			Time_ /= Freq_;
			TickMS_ = (hUint32)( Time_ - LastTime_ );
			TickS_ = TickMS_ / 1000.0f;
			TimeMS_ = Time_;
		}
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	void hClock::Initialise()
	{
		Time_ = 0;
		LastTime_ = 0;
		TickS_ = 0.0f;
		TickMS_ = 0;

		QueryPerformanceFrequency( reinterpret_cast< LARGE_INTEGER*>( &Freq_ ) );

        FreqMicro_	= Freq_/1000000;
		Freq_		/= 1000;

		QueryPerformanceCounter( reinterpret_cast< LARGE_INTEGER* >( &StartTime_ ) );

		StartTime_ /= Freq_;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	void hClock::BeginTimer( hTimer& timer )
	{
		hUint64 time;

		QueryPerformanceCounter( reinterpret_cast< LARGE_INTEGER* >( &time ) );

		timer.beginT_ = time;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

    HEART_DLLEXPORT
	void hClock::EndTimer( hTimer& timer )
	{
		hUint64 time;

		QueryPerformanceCounter( reinterpret_cast< LARGE_INTEGER* >( &time ) );

		timer.deltaT_ = (hUint32)((time-timer.beginT_) / FreqMicro_);
	}
}// namespace hClock
}// namespace Heart