/********************************************************************
    Written by James Moran
    Please see the file HEART_LICENSE.txt in the source's root directory.
*********************************************************************/

#include "base/hClock.h"
#include "base/hProfiler.h"
#include <winsock2.h>
#include <windows.h>

namespace Heart
{
namespace hClock
{
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////
	hInt64			Time_;
	hInt64			TimeMS_;
	hInt64			LastTime_;
	hUint32			TickMS_;
	hFloat			TickS_;
	hInt64			StartTime_;
	hInt64			Freq_;
	hInt64			FreqMicro_;

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hFloat			elapsed()
	{
		return static_cast< hFloat >( (Time_ - StartTime_) / 1000.0f );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint64			elapsedMilli() {
		return Time_ - StartTime_;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint64			deltams()
	{
		return TickMS_;
	}
	
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hFloat			fdeltams()
	{
		return static_cast< hFloat >( TickMS_ );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hFloat			delta()
	{
		return TickS_;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint32			hours()
	{
		return ( ( (hUint32)elapsed() / 60 ) / 60 );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint32			mins()
	{
		return ( (hUint32)elapsed() / 60 ) - ( hours() * 60 );
	}
	
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hUint32			secs()
	{
		return (hUint32)elapsed() - ( mins() * 60 );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hClock::update()
	{
        HEART_PROFILE_FUNC();
		if ( Freq_ != 0 )
		{
			LastTime_ = Time_;

			QueryPerformanceCounter( reinterpret_cast< LARGE_INTEGER* >( &Time_ ) );

			Time_ /= Freq_;
			TickMS_ = (hUint32)( Time_ - LastTime_ );
			TickS_ = TickMS_ / 1000.0f;
			TimeMS_ = Time_;
		}
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void hClock::initialise()
	{
		Time_ = 0;
		LastTime_ = 0;
		TickS_ = 0.0f;
		TickMS_ = 0;

		QueryPerformanceFrequency( reinterpret_cast< LARGE_INTEGER*>( &Freq_ ) );

        FreqMicro_	= Freq_/1000000;
		Freq_		/= 1000;

		QueryPerformanceCounter( reinterpret_cast< LARGE_INTEGER* >( &StartTime_ ) );

		StartTime_ /= Freq_;
	}

}// namespace hClock
}// namespace Heart