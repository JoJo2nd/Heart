/********************************************************************
	created:	2008/10/08
	created:	8:10:2008   20:07
	filename: 	TestBedCore.cpp
	author:		James
	
	purpose:	
*********************************************************************/

#include "TestBedCore.h"
#include <time.h>
#include "CreateTextureTest.h"
#include "MapTest.h"
#include "ListTest.h"
#include "ResourceLoadTest.h"
#include "JobManagerTest.h"

namespace Game
{

	TestBedCore* TestBedCore::pInstance_ = NULL;

	Heart::hVec4 gLightDir;

#define MOVE_SPEED ( 900.0f )

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	TestBedCore::TestBedCore() 
		: pEngine_( NULL )
		, currentTest_( NULL )
		, nextTest_( 0 )
	{
		pInstance_ = this;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	TestBedCore::~TestBedCore()
	{

	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	void TestBedCore::Initialise( const hChar* pCmdLine, Heart::HeartEngine* pEngine )
	{
		hcPrintf( "cmd line: %s\n", pCmdLine );
		hcPrintf( "Home Directory: %s\n", pEngine->GetHomeDirectory() );
		hcPrintf( "Engine Created OK @ 0x%08X", pEngine );

		pEngine_ = pEngine;

		pEngine_->GetSystem()->SetWindowTitle( pEngine->GetHomeDirectory() );

		nextTest_ = 0;

        //unitTestCreators_.PushBack( UnitTestCreator::bind< TestBedCore, &TestBedCore::CreateJobTest >(this) );
        unitTestCreators_.PushBack( UnitTestCreator::bind< TestBedCore, &TestBedCore::CreateResourceLoadTest >(this) );
		unitTestCreators_.PushBack( UnitTestCreator::bind< TestBedCore, &TestBedCore::CreateMapTestsState >( this ) );
		unitTestCreators_.PushBack( UnitTestCreator::bind< TestBedCore, &TestBedCore::CreateListTestState >( this ) );

		luaL_Reg funcs[] =
		{
			{ "NextTest", LuaNextTest },
			{ NULL, NULL }
		};

		pEngine_->GetVM()->RegisterLuaFunctions( funcs );
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	void TestBedCore::EngineUpdateTick( hFloat delta, Heart::HeartEngine* pEngine )
	{
		if ( currentTest_ )
		{
			currentTest_->Process();

			if ( !currentTest_->IsActive() )
			{
				hDELETE(hGeneralHeap, currentTest_);
				currentTest_ = NULL;
			}
		}
		else
		{
			currentTest_ = unitTestCreators_[nextTest_]();
			nextTest_ = (nextTest_+1) % unitTestCreators_.GetSize();
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	void TestBedCore::EngineRenderTick( hFloat delta, Heart::HeartEngine* pEngine )
	{
		if ( currentTest_ )
		{
			currentTest_->Render();
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	bool TestBedCore::EngineShutdownRequest( Heart::HeartEngine* pEngine )
	{
		// We always lets the engine shutdown right away
		// May not be the case if saving...
		if ( currentTest_ )
		{
			currentTest_->ForceLeave();
			if ( !currentTest_->IsActive() )
			{
				return true;
			}
			return false;
		}
		return true;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////

	void TestBedCore::EngineShutdown( Heart::HeartEngine* pEngine )
	{
		unitTestCreators_.Clear();
		delete currentTest_;
		currentTest_ = NULL;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	int TestBedCore::LuaNextTest( lua_State* L )
	{
		if ( pInstance_	)
		{
			pInstance_->StartNextTest();
			return 0;
		}

		return luaL_error( L, "Something really bad happened outside of Lua's environment" );
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void TestBedCore::StartNextTest()
	{
		if ( currentTest_ )
		{
			currentTest_->ForceLeave();
		}
		else
		{
			currentTest_ = unitTestCreators_[nextTest_]();	
		}
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	Heart::hStateBase* TestBedCore::CreateTextureTestState()
	{
		return hNEW(hGeneralHeap, CreateTextureTest(pEngine_));
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	Heart::hStateBase* TestBedCore::CreateMapTestsState()
	{
		return hNEW(hGeneralHeap, MapTest(pEngine_));
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	Heart::hStateBase* TestBedCore::CreateListTestState()
	{
		return hNEW(hGeneralHeap, ListTest(pEngine_));
	}

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    Heart::hStateBase* TestBedCore::CreateResourceLoadTest()
    {
        return hNEW(hGeneralHeap, ResourceLoadTest(pEngine_));
    }

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    Heart::hStateBase* TestBedCore::CreateJobTest()
    {
        return hNEW(hGeneralHeap, JobManagerTest(pEngine_));
    }

}
