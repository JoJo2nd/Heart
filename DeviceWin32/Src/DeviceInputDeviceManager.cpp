/********************************************************************
	created:	2010/09/04
	created:	4:9:2010   11:41
	filename: 	DeviceInputDeviceManager.cpp	
	author:		James
	
	purpose:	
*********************************************************************/

#include "Common.h"
#include "DeviceInputDeviceManager.h"

namespace Heart
{
namespace Device
{
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	InputDeviceManager::InputDeviceManager()
	{

	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	InputDeviceManager::~InputDeviceManager()
	{

	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	hBool InputDeviceManager::Initialise( EventManager* pEvManager )
	{
		keyboard_.Initialise( 0, pEvManager );
	//	mouse_.Initialise( 0, pEvManager );

		return hTrue;
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void InputDeviceManager::Destory()
	{
		keyboard_.Destroy();
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	IInput* InputDeviceManager::GetInputDevice( InputDeviceTypes type, hUint32 port )
	{
		switch( type )
		{
		case IDT_KEYBOARD:
			{
				if ( port == 0 || port == HEART_INPUT_ANY_PORT )
				{
					return &keyboard_;
				}
				else 
				{
					return NULL;
				}
			}
			break;
		default:
			return NULL;
		}
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	ICharacterInput* InputDeviceManager::GetCharacterInputDevice( InputDeviceTypes type, hUint32 port )
	{
		switch( type )
		{
		case IDT_KEYBOARD:
			{
				if ( port == 0 || port == HEART_INPUT_ANY_PORT )
				{
					return &keyboard_;
				}
				else 
				{
					return NULL;
				}
			}
			break;
		default:
			return NULL;
		}
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////

	void InputDeviceManager::Update()
	{
		keyboard_.Update();
	}


}
}